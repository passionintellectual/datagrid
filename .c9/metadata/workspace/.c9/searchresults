{"changed":true,"filter":false,"title":"Search Results","tooltip":"/.c9/searchresults","value":"Searching for \u0001$watch\u0001 in\u0001/\u0001 (Found 99 matches in 5 files)\n\n/angular.js:\n\t642:   return obj && obj.$evalAsync && obj.$watch;\n\t4434:       $rootScope.$watch(function autoScrollWatch() {return $location.hash();},\n\t6056:  *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.\n\t6258:             scope.$watch(\n\t7579:                 var unwatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);\n\t7914:               scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {\n\t8000:                   $watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {\n\t9999:           exp: text, //just for compatibility with regular watchers created via $watch\n\t10001:           $$watchDelegate: function (scope, listener, objectEquality) {\n\t10003:             return scope.$watchGroup(parseFns, function interpolateFnWatcher(values, oldValues) {\n\t10164:       *             scope.$watch(attrs.myCurrentTime, function(value) {\n\t11169:     $rootScope.$watch(function $locationWatch() {\n\t12414:               parsedExpression.$$watchDelegate = constantWatchDelegate;\n\t12417:               //wrap the parsedExpression before adding a $$watchDelegate\n\t12419:               parsedExpression.$$watchDelegate = parsedExpression.literal ?\n\t12422:               parsedExpression.$$watchDelegate = inputsWatchDelegate;\n\t12486:         return scope.$watch(function expressionInputWatch(scope) {\n\t12501:       return scope.$watch(function expressionInputsWatch(scope) {\n\t12521:       return unwatch = scope.$watch(function oneTimeWatch(scope) {\n\t12540:       return unwatch = scope.$watch(function oneTimeWatch(scope) {\n\t12565:       return unwatch = scope.$watch(function constantWatch(scope) {\n\t12586:       // Propagate $$watchDelegates other then inputsWatchDelegate\n\t12587:       if (parsedExpression.$$watchDelegate &&\n\t12588:           parsedExpression.$$watchDelegate !== inputsWatchDelegate) {\n\t12589:         fn.$$watchDelegate = parsedExpression.$$watchDelegate;\n\t12593:         fn.$$watchDelegate = inputsWatchDelegate;\n\t13247:  * In complex applications it's possible that the dependencies between `$watch`s will result in\n\t13328:       this.$$phase = this.$parent = this.$$watchers =\n\t13406:               this.$$watchers = this.$$nextSibling =\n\t13442:        * @name $rootScope.Scope#$watch\n\t13490:            scope.$watch('name', function(newValue, oldValue) {\n\t13513:            scope.$watch(\n\t13556:       $watch: function(watchExp, listener, objectEquality) {\n\t13559:         if (get.$$watchDelegate) {\n\t13560:           return get.$$watchDelegate(this, listener, objectEquality, get);\n\t13563:             array = scope.$$watchers,\n\t13579:           array = scope.$$watchers = [];\n\t13593:        * @name $rootScope.Scope#$watchGroup\n\t13597:        * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.\n\t13600:        * - The items in the `watchExpressions` array are observed via standard $watch operation and are examined on every\n\t13605:        * watched using {@link ng.$rootScope.Scope#$watch $watch()}\n\t13616:       $watchGroup: function(watchExpressions, listener) {\n\t13637:           return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {\n\t13645:           var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {\n\t13677:        * @name $rootScope.Scope#$watchCollection\n\t13685:        * - The `obj` collection is observed via standard $watch operation and is examined on every\n\t13696:           $scope.$watchCollection('names', function(newNames, oldNames) {\n\t13730:       $watchCollection: function(obj, listener) {\n\t13731:         $watchCollectionInterceptor.$stateful = true;\n\t13744:         var changeDetector = $parse(obj, $watchCollectionInterceptor);\n\t13750:         function $watchCollectionInterceptor(_value) {\n\t13827:         function $watchCollectionAction() {\n\t13856:         return this.$watch(changeDetector, $watchCollectionAction);\n\t13865:        * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and\n\t13866:        * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change\n\t13867:        * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}\n\t13880:        * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.\n\t13891:            scope.$watch('name', function(newValue, oldValue) {\n\t13948:             if ((watchers = current.$$watchers)) {\n\t14079:         this.$on = this.$watch = this.$watchGroup = function() { return noop; };\n\t14091:             this.$$childTail = this.$root = this.$$watchers = null;\n\t14207:        * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the\n\t15058:  *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {\n\t17757:         scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {\n\t17781:         scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {\n\t19901:  *     This can be used in place of additional $watches against the model value.\n\t20535:   // Note: we cannot use a normal scope.$watch as we want to detect the following:\n\t20542:   $scope.$watch(function ngModelWatch() {\n\t21141:           scope.$watch(attr.ngValue, function valueWatchAction(value) {\n\t21484:         scope.$watch(attr.ngBind, function ngBindWatchAction(value) {\n\t21622:         scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {\n\t21640:         scope.$watch(attr[name], ngClassWatchAction, true);\n\t21648:           scope.$watch('$index', function($index, old$index) {\n\t23027:         $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {\n\t23280:         scope.$watch($sce.parseAsResourceUrl(srcExp), function ngIncludeWatchAction(src) {\n\t23658:       scope.$watch(function ngPluralizeWatch() {\n\t23985:         $scope.$watchCollection(rhs, function ngRepeatAction(collection) {\n\t24277:       scope.$watch(attr.ngShow, function ngShowWatchAction(value){\n\t24438:       scope.$watch(attr.ngHide, function ngHideWatchAction(value){\n\t24496:   scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {\n\t24652:       scope.$watch(watchExpr, function ngSwitchWatchAction(value) {\n\t25144:         scope.$watch(function selectMultipleWatch() {\n\t25213:         scope.$watchCollection(valuesFn, scheduleRendering);\n\t25214:         scope.$watchCollection(getLabels, scheduleRendering);\n\t25217:           scope.$watchCollection(function() { return ctrl.$modelValue; }, scheduleRendering);\n\t25542:           scope.$watch(interpolateFn, function interpolateWatchAction(newVal, oldVal) {\n\n/element-spinner.js:\n\t150:         scope.$watch('blocked', function statusWatcher (newVal, oldVal) {\n\n/infinitepager.js:\n\t29:                     scope.$watchCollection(controller.repeatAttrs.rhs, function(collection) {\n\t119:                 // $scope.$watch(function() {\n\t129:                 // $scope.$watch('paging.pageSize', function(newValue, oldValue) {\n\n/iscrollable.js:\n\t80:           scope.$watch(function() {\n\t90:           scope.$watch(attrs.refreshScroll, function(val) {\n\n/ngrepeat-events.js:\n\t13:               //scope.$watch('$last', function(newVal, oldVal){\n\nFound 99 matches in 5 files \n\n","undoManager":{"mark":-2,"position":3,"stack":[[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":[" "],"id":4},{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"remove","lines":[" "]},{"start":{"row":0,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["Searching for \u0001currentPage = 0\u0001 in\u0001/\u0001","",""]}],[{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["/paging-service.js:",""],"id":5}],[{"start":{"row":3,"column":0},"end":{"row":5,"column":0},"action":"insert","lines":["\t14:                 thisobj.currentPage = 0;","",""],"id":6},{"start":{"row":5,"column":0},"end":{"row":6,"column":0},"action":"insert","lines":["Found 1 match in 1 file ",""]},{"start":{"row":6,"column":0},"end":{"row":7,"column":0},"action":"insert","lines":["",""]},{"start":{"row":0,"column":37},"end":{"row":0,"column":63},"action":"insert","lines":[" (Found 1 match in 1 file)"]}],[{"start":{"row":90,"column":0},"end":{"row":91,"column":0},"action":"insert","lines":["/element-spinner.js:",""],"id":8},{"start":{"row":91,"column":0},"end":{"row":93,"column":0},"action":"insert","lines":["\t150:         scope.$watch('blocked', function statusWatcher (newVal, oldVal) {","",""]},{"start":{"row":93,"column":0},"end":{"row":98,"column":0},"action":"insert","lines":["/infinitepager.js:","\t29:                     scope.$watchCollection(controller.repeatAttrs.rhs, function(collection) {","\t119:                 // $scope.$watch(function() {","\t129:                 // $scope.$watch('paging.pageSize', function(newValue, oldValue) {","",""]},{"start":{"row":98,"column":0},"end":{"row":102,"column":0},"action":"insert","lines":["/iscrollable.js:","\t80:           scope.$watch(function() {","\t90:           scope.$watch(attrs.refreshScroll, function(val) {","",""]},{"start":{"row":102,"column":0},"end":{"row":103,"column":0},"action":"insert","lines":["/ngrepeat-events.js:",""]},{"start":{"row":103,"column":0},"end":{"row":105,"column":0},"action":"insert","lines":["\t13:               //scope.$watch('$last', function(newVal, oldVal){","",""]},{"start":{"row":105,"column":0},"end":{"row":106,"column":0},"action":"insert","lines":["Found 99 matches in 5 files ",""]},{"start":{"row":106,"column":0},"end":{"row":107,"column":0},"action":"insert","lines":["",""]},{"start":{"row":0,"column":28},"end":{"row":0,"column":58},"action":"insert","lines":[" (Found 99 matches in 5 files)"]}]]},"ace":{"folds":[{"start":{"row":2,"column":12},"end":{"row":89,"column":0},"placeholder":"..."},{"start":{"row":90,"column":20},"end":{"row":92,"column":0},"placeholder":"..."}],"customSyntax":"c9search","scrolltop":0,"scrollleft":0,"selection":{"start":{"row":3,"column":29},"end":{"row":3,"column":40},"isBackwards":true},"options":{"tabSize":4,"useSoftTabs":true,"guessTabSize":false,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1440134340563}